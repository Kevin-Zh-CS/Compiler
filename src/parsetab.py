
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftORleftANDnonassocEQNEQnonassocLTGTLEQGEQleft+-left*/%rightUMINUSUPLUSNOTnonassocBRACKETSnonassocDANGLINGAND ARRAY ASSIGN BEGIN BOOL BREAK CASE CHAR CONST CONTINUE DO DOWNTO ELSE END EQ EXIT FOR FUNCTION GEQ GOTO GT ID IF INT LABEL LEQ LITERAL_BOOL LITERAL_CHAR LITERAL_INT LITERAL_REAL LITERAL_STRING LT NEQ NOT OF OR PROCEDURE PROGRAM RANGE REAL RECORD REPEAT RETURN STRING THEN TO TYPE UNTIL VAR WHILEprogram : PROGRAM ID ';' body '.'\n        body : local_list compound_stmt\n        local_list : local_list local\n                      | empty\n        local : VAR var_list\n        local : LABEL id_list ';'\n        local : CONST const_exp_list\n        local : header ';' body ';'\n        var_list : var_list var\n                    | var\n        var : id_list ':' vartype ';'\n               | id_list ':' vartype EQ exp ';'\n        const_exp_list : const_exp_list const_exp\n                          | const_exp\n        const_exp : id_list EQ literal ';'\n        id_list : ID comma_id_list\n        comma_id_list : comma_id_list ',' ID\n                         | empty\n        header : PROCEDURE ID '(' formal_list ')'\n                  | PROCEDURE ID '(' ')'\n        header : FUNCTION ID '(' formal_list ')' ':' vartype\n                    | FUNCTION ID '(' ')' ':' vartype\n        formal_list : formal semicolon_formal_list\n        formal : id_list ':' vartype\n        semicolon_formal_list : semicolon_formal_list ';' formal\n                                 | empty\n        vartype : INT\n                   | REAL\n                   | BOOL\n                   | CHAR\n                   | STRING\n        vartype : ARRAY '[' LITERAL_INT ']' OF vartype\n                   | ARRAY '[' LITERAL_INT RANGE LITERAL_INT ']' OF vartype\n        semicolon_stmt_list : semicolon_stmt_list ';' stmt\n                               | empty\n        stmt : ID ':' non_label_stmt\n                | non_label_stmt\n        non_label_stmt : assign_stmt\n                          | call_stmt\n                          | for_stmt\n                          | if_stmt\n                          | while_stmt\n                          | repeat_stmt\n                          | case_stmt\n                          | goto_stmt\n                          | compound_stmt\n        assign_stmt : lvalue ASSIGN exp\n        for_stmt : FOR ID ASSIGN exp direction exp DO stmt\n        direction : DOWNTO\n                     | TO\n        while_stmt : WHILE exp DO stmt\n        repeat_stmt : REPEAT stmt semicolon_stmt_list UNTIL exp\n        case_stmt : CASE exp OF case_exp_list END\n        case_exp_list : case_exp_list ';' case_exp\n                         | case_exp\n        case_exp : literal ':' stmt\n                    | ID ':' stmt\n        goto_stmt : GOTO ID\n        compound_stmt : BEGIN stmt semicolon_stmt_list END\n        call_stmt : ID '(' exp comma_exp_list ')'\n                     | vartype '(' exp ')'\n                     | ID '(' ')'\n        comma_exp_list : comma_exp_list ',' exp\n                          | empty\n        if_stmt : IF exp THEN stmt else_stmt\n        else_stmt : ELSE stmt \n                     | empty %prec DANGLING\n        lvalue : ID\n                  | ID '[' exp ']' %prec BRACKETS         \n        literal : LITERAL_INT\n                   | LITERAL_REAL\n                   | LITERAL_BOOL\n                   | LITERAL_CHAR\n                   | LITERAL_STRING\n        exp : call_stmt\n        exp : exp '+' exp\n               | exp '-' exp\n               | exp '*' exp\n               | exp '/' exp\n               | exp '%' exp\n               | exp EQ exp\n               | exp NEQ exp\n               | exp LT exp\n               | exp GT exp\n               | exp LEQ exp\n               | exp GEQ exp\n               | exp AND exp\n               | exp OR exp\n        exp : NOT exp\n               | '-' exp %prec UMINUS\n               | '+' exp %prec UPLUS\n        exp : '(' exp ')'\n        exp : ID\n        exp : literal\n        exp : ID '[' exp ']'\n        empty :"
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'ID':([2,11,12,13,14,16,17,32,33,34,35,36,37,44,45,49,50,57,58,59,60,61,65,66,67,68,81,86,89,90,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,122,125,157,164,165,167,175,176,177,178,180,185,186,187,191,203,206,],[3,19,47,47,47,53,54,62,69,69,19,69,79,47,-10,47,-14,93,69,69,69,69,69,69,69,69,-9,-13,47,47,19,69,19,69,69,69,69,69,69,69,69,69,69,69,69,69,69,19,161,166,69,-11,69,-15,69,69,-49,-50,19,161,19,19,47,-12,19,]),';':([3,9,15,18,20,21,22,23,24,25,26,27,28,29,38,39,40,41,42,47,48,55,56,64,69,70,71,72,73,74,75,77,79,83,84,88,91,94,96,98,115,116,117,121,124,126,129,130,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,158,159,166,168,169,170,174,179,181,182,183,184,190,192,194,197,198,199,200,201,204,205,208,209,],[4,-2,52,-96,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-27,-28,-29,-30,-31,-96,85,92,-35,-75,-93,-94,-70,-71,-72,-73,-74,-96,-58,-16,-18,127,-59,-36,-62,-47,-91,-90,-89,92,164,167,-20,-96,-34,-61,-96,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-51,185,-55,-17,-19,191,-26,-60,-65,-67,-95,-52,-53,203,-24,-22,-66,-54,-56,-57,-32,-25,-21,-48,-33,]),'BEGIN':([4,6,7,10,11,35,44,45,49,50,52,57,81,85,86,92,101,120,127,164,167,180,186,187,203,206,],[-96,11,-4,-3,11,11,-5,-10,-7,-14,-96,11,-9,-6,-13,11,11,11,-8,-11,-15,11,11,11,-12,11,]),'VAR':([4,6,7,10,44,45,49,50,52,81,85,86,127,164,167,203,],[-96,12,-4,-3,-5,-10,-7,-14,-96,-9,-6,-13,-8,-11,-15,-12,]),'LABEL':([4,6,7,10,44,45,49,50,52,81,85,86,127,164,167,203,],[-96,13,-4,-3,-5,-10,-7,-14,-96,-9,-6,-13,-8,-11,-15,-12,]),'CONST':([4,6,7,10,44,45,49,50,52,81,85,86,127,164,167,203,],[-96,14,-4,-3,-5,-10,-7,-14,-96,-9,-6,-13,-8,-11,-15,-12,]),'PROCEDURE':([4,6,7,10,44,45,49,50,52,81,85,86,127,164,167,203,],[-96,16,-4,-3,-5,-10,-7,-14,-96,-9,-6,-13,-8,-11,-15,-12,]),'FUNCTION':([4,6,7,10,44,45,49,50,52,81,85,86,127,164,167,203,],[-96,17,-4,-3,-5,-10,-7,-14,-96,-9,-6,-13,-8,-11,-15,-12,]),'.':([5,9,91,],[8,-2,-59,]),'FOR':([11,35,57,92,101,120,180,186,187,206,],[32,32,32,32,32,32,32,32,32,32,]),'IF':([11,35,57,92,101,120,180,186,187,206,],[33,33,33,33,33,33,33,33,33,33,]),'WHILE':([11,35,57,92,101,120,180,186,187,206,],[34,34,34,34,34,34,34,34,34,34,]),'REPEAT':([11,35,57,92,101,120,180,186,187,206,],[35,35,35,35,35,35,35,35,35,35,]),'CASE':([11,35,57,92,101,120,180,186,187,206,],[36,36,36,36,36,36,36,36,36,36,]),'GOTO':([11,35,57,92,101,120,180,186,187,206,],[37,37,37,37,37,37,37,37,37,37,]),'INT':([11,33,34,35,36,57,58,59,60,61,65,66,67,68,82,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,157,165,171,173,175,176,177,178,180,186,187,188,193,206,207,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-49,-50,38,38,38,38,38,38,38,]),'REAL':([11,33,34,35,36,57,58,59,60,61,65,66,67,68,82,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,157,165,171,173,175,176,177,178,180,186,187,188,193,206,207,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-49,-50,39,39,39,39,39,39,39,]),'BOOL':([11,33,34,35,36,57,58,59,60,61,65,66,67,68,82,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,157,165,171,173,175,176,177,178,180,186,187,188,193,206,207,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-49,-50,40,40,40,40,40,40,40,]),'CHAR':([11,33,34,35,36,57,58,59,60,61,65,66,67,68,82,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,157,165,171,173,175,176,177,178,180,186,187,188,193,206,207,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-49,-50,41,41,41,41,41,41,41,]),'STRING':([11,33,34,35,36,57,58,59,60,61,65,66,67,68,82,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,157,165,171,173,175,176,177,178,180,186,187,188,193,206,207,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-49,-50,42,42,42,42,42,42,42,]),'ARRAY':([11,33,34,35,36,57,58,59,60,61,65,66,67,68,82,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,157,165,171,173,175,176,177,178,180,186,187,188,193,206,207,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-49,-50,43,43,43,43,43,43,43,]),'END':([18,20,21,22,23,24,25,26,27,28,29,55,56,64,69,70,71,72,73,74,75,79,91,94,96,98,115,116,117,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,158,159,174,179,181,182,183,184,197,198,199,200,208,],[-96,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,91,-35,-75,-93,-94,-70,-71,-72,-73,-74,-58,-59,-36,-62,-47,-91,-90,-89,-34,-61,-96,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-51,184,-55,-60,-65,-67,-95,-52,-53,-66,-54,-56,-57,-48,]),':':([19,46,47,71,72,73,74,75,83,84,131,133,160,161,166,172,],[57,82,-96,-70,-71,-72,-73,-74,-16,-18,171,173,186,187,-17,193,]),'(':([19,31,33,34,36,38,39,40,41,42,53,54,58,59,60,61,65,66,67,68,69,93,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,157,165,175,176,177,178,201,209,],[58,61,68,68,68,-27,-28,-29,-30,-31,89,90,68,68,68,68,68,68,68,68,58,58,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-49,-50,-32,-33,]),'ASSIGN':([19,30,62,93,137,],[-68,60,100,-68,-69,]),'[':([19,43,69,93,],[59,80,119,59,]),'UNTIL':([20,21,22,23,24,25,26,27,28,29,56,64,69,70,71,72,73,74,75,77,79,91,94,96,98,115,116,117,121,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,174,179,181,182,183,184,197,208,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-35,-75,-93,-94,-70,-71,-72,-73,-74,-96,-58,-59,-36,-62,-47,-91,-90,-89,157,-34,-61,-96,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-51,-60,-65,-67,-95,-52,-53,-66,-48,]),'ELSE':([20,21,22,23,24,25,26,27,28,29,64,69,70,71,72,73,74,75,79,91,94,96,98,115,116,117,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,174,179,181,182,183,184,197,208,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-75,-93,-94,-70,-71,-72,-73,-74,-58,-59,-36,-62,-47,-91,-90,-89,-61,180,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-51,-60,-65,-67,-95,-52,-53,-66,-48,]),'NOT':([33,34,36,58,59,60,61,65,66,67,68,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,157,165,175,176,177,178,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-49,-50,]),'-':([33,34,36,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,165,174,175,176,177,178,182,183,190,195,196,],[66,66,66,66,66,66,66,103,-75,66,66,66,66,-93,-94,-70,-71,-72,-73,-74,103,103,103,-62,103,103,103,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-91,-90,-89,103,66,-61,103,-76,-77,-78,-79,-80,103,103,103,103,103,103,103,103,-92,103,66,66,-60,66,66,-49,-50,-95,103,103,103,103,]),'+':([33,34,36,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,165,174,175,176,177,178,182,183,190,195,196,],[65,65,65,65,65,65,65,102,-75,65,65,65,65,-93,-94,-70,-71,-72,-73,-74,102,102,102,-62,102,102,102,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-91,-90,-89,102,65,-61,102,-76,-77,-78,-79,-80,102,102,102,102,102,102,102,102,-92,102,65,65,-60,65,65,-49,-50,-95,102,102,102,102,]),'LITERAL_INT':([33,34,36,58,59,60,61,65,66,67,68,80,87,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,122,157,163,165,175,176,177,178,185,],[71,71,71,71,71,71,71,71,71,71,71,123,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,189,71,71,71,-49,-50,71,]),'LITERAL_REAL':([33,34,36,58,59,60,61,65,66,67,68,87,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,122,157,165,175,176,177,178,185,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-49,-50,72,]),'LITERAL_BOOL':([33,34,36,58,59,60,61,65,66,67,68,87,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,122,157,165,175,176,177,178,185,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-49,-50,73,]),'LITERAL_CHAR':([33,34,36,58,59,60,61,65,66,67,68,87,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,122,157,165,175,176,177,178,185,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-49,-50,74,]),'LITERAL_STRING':([33,34,36,58,59,60,61,65,66,67,68,87,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,122,157,165,175,176,177,178,185,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-49,-50,75,]),'EQ':([38,39,40,41,42,47,51,63,64,69,70,71,72,73,74,75,76,78,83,84,95,96,97,98,99,115,116,117,118,124,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,166,174,182,183,190,195,196,201,209,],[-27,-28,-29,-30,-31,-96,87,107,-75,-93,-94,-70,-71,-72,-73,-74,107,107,-16,-18,107,-62,107,107,107,-91,-90,-89,107,165,-61,107,-76,-77,-78,-79,-80,None,None,-83,-84,-85,-86,107,107,-92,107,-17,-60,-95,107,107,107,107,-32,-33,]),')':([38,39,40,41,42,58,64,69,70,71,72,73,74,75,89,90,95,96,99,115,116,117,118,128,130,132,135,136,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,169,170,174,182,192,195,201,204,209,],[-27,-28,-29,-30,-31,96,-75,-93,-94,-70,-71,-72,-73,-74,129,133,-96,-62,138,-91,-90,-89,154,168,-96,172,174,-64,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-23,-26,-60,-95,-24,-63,-32,-25,-33,]),',':([47,64,69,70,71,72,73,74,75,83,84,95,96,115,116,117,135,136,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,166,174,182,195,],[-96,-75,-93,-94,-70,-71,-72,-73,-74,125,-18,-96,-62,-91,-90,-89,175,-64,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-17,-60,-95,-63,]),'THEN':([63,64,69,70,71,72,73,74,75,96,115,116,117,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,174,182,],[101,-75,-93,-94,-70,-71,-72,-73,-74,-62,-91,-90,-89,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-60,-95,]),'*':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[104,-75,-93,-94,-70,-71,-72,-73,-74,104,104,104,-62,104,104,104,-91,-90,-89,104,-61,104,104,104,-78,-79,-80,104,104,104,104,104,104,104,104,-92,104,-60,-95,104,104,104,104,]),'/':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[105,-75,-93,-94,-70,-71,-72,-73,-74,105,105,105,-62,105,105,105,-91,-90,-89,105,-61,105,105,105,-78,-79,-80,105,105,105,105,105,105,105,105,-92,105,-60,-95,105,105,105,105,]),'%':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[106,-75,-93,-94,-70,-71,-72,-73,-74,106,106,106,-62,106,106,106,-91,-90,-89,106,-61,106,106,106,-78,-79,-80,106,106,106,106,106,106,106,106,-92,106,-60,-95,106,106,106,106,]),'NEQ':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[108,-75,-93,-94,-70,-71,-72,-73,-74,108,108,108,-62,108,108,108,-91,-90,-89,108,-61,108,-76,-77,-78,-79,-80,None,None,-83,-84,-85,-86,108,108,-92,108,-60,-95,108,108,108,108,]),'LT':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[109,-75,-93,-94,-70,-71,-72,-73,-74,109,109,109,-62,109,109,109,-91,-90,-89,109,-61,109,-76,-77,-78,-79,-80,109,109,None,None,None,None,109,109,-92,109,-60,-95,109,109,109,109,]),'GT':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[110,-75,-93,-94,-70,-71,-72,-73,-74,110,110,110,-62,110,110,110,-91,-90,-89,110,-61,110,-76,-77,-78,-79,-80,110,110,None,None,None,None,110,110,-92,110,-60,-95,110,110,110,110,]),'LEQ':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[111,-75,-93,-94,-70,-71,-72,-73,-74,111,111,111,-62,111,111,111,-91,-90,-89,111,-61,111,-76,-77,-78,-79,-80,111,111,None,None,None,None,111,111,-92,111,-60,-95,111,111,111,111,]),'GEQ':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[112,-75,-93,-94,-70,-71,-72,-73,-74,112,112,112,-62,112,112,112,-91,-90,-89,112,-61,112,-76,-77,-78,-79,-80,112,112,None,None,None,None,112,112,-92,112,-60,-95,112,112,112,112,]),'AND':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[113,-75,-93,-94,-70,-71,-72,-73,-74,113,113,113,-62,113,113,113,-91,-90,-89,113,-61,113,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,113,-92,113,-60,-95,113,113,113,113,]),'OR':([63,64,69,70,71,72,73,74,75,76,78,95,96,97,98,99,115,116,117,118,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,183,190,195,196,],[114,-75,-93,-94,-70,-71,-72,-73,-74,114,114,114,-62,114,114,114,-91,-90,-89,114,-61,114,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,114,-60,-95,114,114,114,114,]),'DO':([64,69,70,71,72,73,74,75,76,96,115,116,117,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,174,182,196,],[-75,-93,-94,-70,-71,-72,-73,-74,120,-62,-91,-90,-89,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-60,-95,206,]),'OF':([64,69,70,71,72,73,74,75,78,96,115,116,117,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,162,174,182,202,],[-75,-93,-94,-70,-71,-72,-73,-74,122,-62,-91,-90,-89,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,188,-60,-95,207,]),']':([64,69,70,71,72,73,74,75,96,97,115,116,117,123,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,174,182,189,],[-75,-93,-94,-70,-71,-72,-73,-74,-62,137,-91,-90,-89,162,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,182,-60,-95,202,]),'DOWNTO':([64,69,70,71,72,73,74,75,96,115,116,117,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,174,182,],[-75,-93,-94,-70,-71,-72,-73,-74,-62,-91,-90,-89,-61,177,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-60,-95,]),'TO':([64,69,70,71,72,73,74,75,96,115,116,117,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,174,182,],[-75,-93,-94,-70,-71,-72,-73,-74,-62,-91,-90,-89,-61,178,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-92,-60,-95,]),'RANGE':([123,],[163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body':([4,52,],[5,88,]),'local_list':([4,52,],[6,6,]),'empty':([4,18,47,52,77,95,130,140,],[7,56,84,7,56,136,170,181,]),'compound_stmt':([6,11,35,57,92,101,120,180,186,187,206,],[9,29,29,29,29,29,29,29,29,29,29,]),'local':([6,],[10,]),'header':([6,],[15,]),'stmt':([11,35,92,101,120,180,186,187,206,],[18,77,134,140,156,197,199,200,208,]),'non_label_stmt':([11,35,57,92,101,120,180,186,187,206,],[20,20,94,20,20,20,20,20,20,20,]),'assign_stmt':([11,35,57,92,101,120,180,186,187,206,],[21,21,21,21,21,21,21,21,21,21,]),'call_stmt':([11,33,34,35,36,57,58,59,60,61,65,66,67,68,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,157,165,175,176,180,186,187,206,],[22,64,64,22,64,22,64,64,64,64,64,64,64,64,22,64,22,64,64,64,64,64,64,64,64,64,64,64,64,64,64,22,64,64,64,64,22,22,22,22,]),'for_stmt':([11,35,57,92,101,120,180,186,187,206,],[23,23,23,23,23,23,23,23,23,23,]),'if_stmt':([11,35,57,92,101,120,180,186,187,206,],[24,24,24,24,24,24,24,24,24,24,]),'while_stmt':([11,35,57,92,101,120,180,186,187,206,],[25,25,25,25,25,25,25,25,25,25,]),'repeat_stmt':([11,35,57,92,101,120,180,186,187,206,],[26,26,26,26,26,26,26,26,26,26,]),'case_stmt':([11,35,57,92,101,120,180,186,187,206,],[27,27,27,27,27,27,27,27,27,27,]),'goto_stmt':([11,35,57,92,101,120,180,186,187,206,],[28,28,28,28,28,28,28,28,28,28,]),'lvalue':([11,35,57,92,101,120,180,186,187,206,],[30,30,30,30,30,30,30,30,30,30,]),'vartype':([11,33,34,35,36,57,58,59,60,61,65,66,67,68,82,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,157,165,171,173,175,176,180,186,187,188,193,206,207,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,124,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,192,194,31,31,31,31,31,201,205,31,209,]),'var_list':([12,],[44,]),'var':([12,44,],[45,81,]),'id_list':([12,13,14,44,49,89,90,191,],[46,48,51,46,51,131,131,131,]),'const_exp_list':([14,],[49,]),'const_exp':([14,49,],[50,86,]),'semicolon_stmt_list':([18,77,],[55,121,]),'exp':([33,34,36,58,59,60,61,65,66,67,68,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,157,165,175,176,],[63,76,78,95,97,98,99,115,116,117,118,139,141,142,143,144,145,146,147,148,149,150,151,152,153,155,183,190,195,196,]),'literal':([33,34,36,58,59,60,61,65,66,67,68,87,100,102,103,104,105,106,107,108,109,110,111,112,113,114,119,122,157,165,175,176,185,],[70,70,70,70,70,70,70,70,70,70,70,126,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,160,70,70,70,70,160,]),'comma_id_list':([47,],[83,]),'formal_list':([89,90,],[128,132,]),'formal':([89,90,191,],[130,130,204,]),'comma_exp_list':([95,],[135,]),'case_exp_list':([122,],[158,]),'case_exp':([122,185,],[159,198,]),'semicolon_formal_list':([130,],[169,]),'direction':([139,],[176,]),'else_stmt':([140,],[179,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; body .','program',5,'p_program','yacc.py',30),
  ('body -> local_list compound_stmt','body',2,'p_body','yacc.py',35),
  ('local_list -> local_list local','local_list',2,'p_local_list','yacc.py',40),
  ('local_list -> empty','local_list',1,'p_local_list','yacc.py',41),
  ('local -> VAR var_list','local',2,'p_local1','yacc.py',50),
  ('local -> LABEL id_list ;','local',3,'p_local2','yacc.py',55),
  ('local -> CONST const_exp_list','local',2,'p_local3','yacc.py',60),
  ('local -> header ; body ;','local',4,'p_local4','yacc.py',65),
  ('var_list -> var_list var','var_list',2,'p_var_list','yacc.py',70),
  ('var_list -> var','var_list',1,'p_var_list','yacc.py',71),
  ('var -> id_list : vartype ;','var',4,'p_var','yacc.py',80),
  ('var -> id_list : vartype EQ exp ;','var',6,'p_var','yacc.py',81),
  ('const_exp_list -> const_exp_list const_exp','const_exp_list',2,'p_const_exp_list','yacc.py',90),
  ('const_exp_list -> const_exp','const_exp_list',1,'p_const_exp_list','yacc.py',91),
  ('const_exp -> id_list EQ literal ;','const_exp',4,'p_const_exp','yacc.py',100),
  ('id_list -> ID comma_id_list','id_list',2,'p_id_list','yacc.py',105),
  ('comma_id_list -> comma_id_list , ID','comma_id_list',3,'p_comma_id_list','yacc.py',111),
  ('comma_id_list -> empty','comma_id_list',1,'p_comma_id_list','yacc.py',112),
  ('header -> PROCEDURE ID ( formal_list )','header',5,'p_header1','yacc.py',121),
  ('header -> PROCEDURE ID ( )','header',4,'p_header1','yacc.py',122),
  ('header -> FUNCTION ID ( formal_list ) : vartype','header',7,'p_header2','yacc.py',130),
  ('header -> FUNCTION ID ( ) : vartype','header',6,'p_header2','yacc.py',131),
  ('formal_list -> formal semicolon_formal_list','formal_list',2,'p_formal_list','yacc.py',139),
  ('formal -> id_list : vartype','formal',3,'p_formal','yacc.py',145),
  ('semicolon_formal_list -> semicolon_formal_list ; formal','semicolon_formal_list',3,'p_semicolon_formal_list','yacc.py',150),
  ('semicolon_formal_list -> empty','semicolon_formal_list',1,'p_semicolon_formal_list','yacc.py',151),
  ('vartype -> INT','vartype',1,'p_vartype1','yacc.py',161),
  ('vartype -> REAL','vartype',1,'p_vartype1','yacc.py',162),
  ('vartype -> BOOL','vartype',1,'p_vartype1','yacc.py',163),
  ('vartype -> CHAR','vartype',1,'p_vartype1','yacc.py',164),
  ('vartype -> STRING','vartype',1,'p_vartype1','yacc.py',165),
  ('vartype -> ARRAY [ LITERAL_INT ] OF vartype','vartype',6,'p_vartype2','yacc.py',170),
  ('vartype -> ARRAY [ LITERAL_INT RANGE LITERAL_INT ] OF vartype','vartype',8,'p_vartype2','yacc.py',171),
  ('semicolon_stmt_list -> semicolon_stmt_list ; stmt','semicolon_stmt_list',3,'p_semicolon_stmt_list','yacc.py',179),
  ('semicolon_stmt_list -> empty','semicolon_stmt_list',1,'p_semicolon_stmt_list','yacc.py',180),
  ('stmt -> ID : non_label_stmt','stmt',3,'p_stmt','yacc.py',189),
  ('stmt -> non_label_stmt','stmt',1,'p_stmt','yacc.py',190),
  ('non_label_stmt -> assign_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',198),
  ('non_label_stmt -> call_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',199),
  ('non_label_stmt -> for_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',200),
  ('non_label_stmt -> if_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',201),
  ('non_label_stmt -> while_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',202),
  ('non_label_stmt -> repeat_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',203),
  ('non_label_stmt -> case_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',204),
  ('non_label_stmt -> goto_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',205),
  ('non_label_stmt -> compound_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',206),
  ('assign_stmt -> lvalue ASSIGN exp','assign_stmt',3,'p_assign_stmt','yacc.py',211),
  ('for_stmt -> FOR ID ASSIGN exp direction exp DO stmt','for_stmt',8,'p_for_stmt','yacc.py',216),
  ('direction -> DOWNTO','direction',1,'p_direction','yacc.py',222),
  ('direction -> TO','direction',1,'p_direction','yacc.py',223),
  ('while_stmt -> WHILE exp DO stmt','while_stmt',4,'p_while_stmt','yacc.py',228),
  ('repeat_stmt -> REPEAT stmt semicolon_stmt_list UNTIL exp','repeat_stmt',5,'p_repeat_stmt','yacc.py',233),
  ('case_stmt -> CASE exp OF case_exp_list END','case_stmt',5,'p_case_stmt','yacc.py',239),
  ('case_exp_list -> case_exp_list ; case_exp','case_exp_list',3,'p_case_exp_list','yacc.py',244),
  ('case_exp_list -> case_exp','case_exp_list',1,'p_case_exp_list','yacc.py',245),
  ('case_exp -> literal : stmt','case_exp',3,'p_case_exp','yacc.py',256),
  ('case_exp -> ID : stmt','case_exp',3,'p_case_exp','yacc.py',257),
  ('goto_stmt -> GOTO ID','goto_stmt',2,'p_goto_stmt','yacc.py',263),
  ('compound_stmt -> BEGIN stmt semicolon_stmt_list END','compound_stmt',4,'p_compound_stmt','yacc.py',268),
  ('call_stmt -> ID ( exp comma_exp_list )','call_stmt',5,'p_call_stmt','yacc.py',274),
  ('call_stmt -> vartype ( exp )','call_stmt',4,'p_call_stmt','yacc.py',275),
  ('call_stmt -> ID ( )','call_stmt',3,'p_call_stmt','yacc.py',276),
  ('comma_exp_list -> comma_exp_list , exp','comma_exp_list',3,'p_comma_exp_list','yacc.py',287),
  ('comma_exp_list -> empty','comma_exp_list',1,'p_comma_exp_list','yacc.py',288),
  ('if_stmt -> IF exp THEN stmt else_stmt','if_stmt',5,'p_if_stmt','yacc.py',297),
  ('else_stmt -> ELSE stmt','else_stmt',2,'p_else_stmt','yacc.py',302),
  ('else_stmt -> empty','else_stmt',1,'p_else_stmt','yacc.py',303),
  ('lvalue -> ID','lvalue',1,'p_lvalue','yacc.py',312),
  ('lvalue -> ID [ exp ]','lvalue',4,'p_lvalue','yacc.py',313),
  ('literal -> LITERAL_INT','literal',1,'p_literal','yacc.py',321),
  ('literal -> LITERAL_REAL','literal',1,'p_literal','yacc.py',322),
  ('literal -> LITERAL_BOOL','literal',1,'p_literal','yacc.py',323),
  ('literal -> LITERAL_CHAR','literal',1,'p_literal','yacc.py',324),
  ('literal -> LITERAL_STRING','literal',1,'p_literal','yacc.py',325),
  ('exp -> call_stmt','exp',1,'p_exp1','yacc.py',330),
  ('exp -> exp + exp','exp',3,'p_exp2','yacc.py',335),
  ('exp -> exp - exp','exp',3,'p_exp2','yacc.py',336),
  ('exp -> exp * exp','exp',3,'p_exp2','yacc.py',337),
  ('exp -> exp / exp','exp',3,'p_exp2','yacc.py',338),
  ('exp -> exp % exp','exp',3,'p_exp2','yacc.py',339),
  ('exp -> exp EQ exp','exp',3,'p_exp2','yacc.py',340),
  ('exp -> exp NEQ exp','exp',3,'p_exp2','yacc.py',341),
  ('exp -> exp LT exp','exp',3,'p_exp2','yacc.py',342),
  ('exp -> exp GT exp','exp',3,'p_exp2','yacc.py',343),
  ('exp -> exp LEQ exp','exp',3,'p_exp2','yacc.py',344),
  ('exp -> exp GEQ exp','exp',3,'p_exp2','yacc.py',345),
  ('exp -> exp AND exp','exp',3,'p_exp2','yacc.py',346),
  ('exp -> exp OR exp','exp',3,'p_exp2','yacc.py',347),
  ('exp -> NOT exp','exp',2,'p_exp3','yacc.py',352),
  ('exp -> - exp','exp',2,'p_exp3','yacc.py',353),
  ('exp -> + exp','exp',2,'p_exp3','yacc.py',354),
  ('exp -> ( exp )','exp',3,'p_exp4','yacc.py',365),
  ('exp -> ID','exp',1,'p_exp5','yacc.py',370),
  ('exp -> literal','exp',1,'p_exp6','yacc.py',375),
  ('exp -> ID [ exp ]','exp',4,'p_exp7','yacc.py',380),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',387),
]
