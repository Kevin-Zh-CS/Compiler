
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftORleftANDnonassocEQNEQnonassocLTGTLEQGEQleft+-left*/%rightUMINUSNOTnonassocBRACKETSnonassocDANGLINGAND ARRAY ASSIGN BEGIN BOOL BREAK CASE CHAR COMMENT CONST CONTINUE DO DOWNTO ELSE END EQ EXIT FOR FUNCTION GEQ GOTO GT ID IF INT LABEL LEQ LITERAL_BOOL LITERAL_CHAR LITERAL_INT LITERAL_REAL LITERAL_STRING LT NEQ NOT OF OR PROCEDURE PROGRAM RANGE REAL RECORD REPEAT RETURN STRING THEN TO TYPE UNTIL VAR WHILEprogram : PROGRAM ID ';' body '.'\n        body : local_list compound_stmt\n        local_list : local_list local\n                      | empty\n        local : VAR var_list\n        local : LABEL id_list ';'\n        local : CONST const_exp_list\n        local : header ';' body ';'\n        var_list : var_list var\n                    | var\n        var : id_list ':' vartype ';'\n               | id_list ':' vartype EQ exp ';'\n        const_exp_list : const_exp_list const_exp\n                          | const_exp\n        const_exp : id_list EQ literal ';'\n        id_list : ID comma_id_list\n        comma_id_list : comma_id_list ',' ID\n                         | empty\n        header : PROCEDURE ID '(' formal_list ')'\n                  | PROCEDURE ID '(' ')'\n        header : FUNCTION ID '(' formal_list ')' ':' vartype\n                    | FUNCTION ID '(' ')' ':' vartype\n        formal_list : formal semicolon_formal_list\n        formal : id_list ':' vartype\n        semicolon_formal_list : semicolon_formal_list ';' formal\n                                 | empty\n        vartype : INT\n                   | REAL\n                   | BOOL\n                   | CHAR\n                   | STRING\n        vartype : ARRAY '[' LITERAL_INT ']' OF vartype\n                   | ARRAY '[' LITERAL_INT RANGE LITERAL_INT ']' OF vartype\n        semicolon_stmt_list : semicolon_stmt_list ';' stmt\n                               | empty\n        stmt : ID ':' non_label_stmt\n                | non_label_stmt\n        non_label_stmt : assign_stmt\n                          | call_stmt\n                          | for_stmt\n                          | if_stmt\n                          | while_stmt\n                          | repeat_stmt\n                          | case_stmt\n                          | goto_stmt\n                          | compound_stmt\n        assign_stmt : lvalue ASSIGN exp\n        for_stmt : FOR ID ASSIGN exp direction exp DO stmt\n        direction : DOWNTO\n                     | TO\n        while_stmt : WHILE exp DO stmt\n        repeat_stmt : REPEAT stmt semicolon_stmt_list UNTIL exp\n        case_stmt : CASE exp OF case_exp_list END\n        case_exp_list : case_exp_list ';' case_exp\n                         | case_exp\n        case_exp : literal ':' stmt\n                    | ID ':' stmt\n        goto_stmt : GOTO ID\n        compound_stmt : BEGIN stmt semicolon_stmt_list END\n        call_stmt : ID '(' exp comma_exp_list ')'\n                     | vartype '(' exp ')'\n                     | ID '(' ')'\n        comma_exp_list : comma_exp_list ',' exp\n                          | empty\n        if_stmt : IF exp THEN stmt else_stmt\n        else_stmt : ELSE stmt \n                     | empty %prec DANGLING\n        lvalue : ID\n                  | ID '[' exp ']' %prec BRACKETS         \n        literal : LITERAL_INT\n                   | LITERAL_REAL\n                   | LITERAL_BOOL\n                   | LITERAL_CHAR\n                   | LITERAL_STRING\n        exp : call_stmt\n        exp : exp '+' exp\n               | exp '-' exp\n               | exp '*' exp\n               | exp '/' exp\n               | exp '%' exp\n               | exp EQ exp\n               | exp NEQ exp\n               | exp LT exp\n               | exp GT exp\n               | exp LEQ exp\n               | exp GEQ exp\n               | exp AND exp\n               | exp OR exp\n        exp : NOT exp\n        exp : '-' exp %prec UMINUSexp : '(' exp ')'\n        exp : ID\n               | literal\n        exp : ID '[' LITERAL_INT ']'\n        empty :"
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'ID':([2,11,12,13,14,16,17,32,33,34,35,36,37,44,45,49,50,57,58,59,60,61,65,66,67,80,85,88,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,120,123,155,162,163,165,173,174,175,176,178,183,184,185,189,201,204,],[3,19,47,47,47,53,54,62,68,68,19,68,78,47,-10,47,-14,92,68,68,68,68,68,68,68,-9,-13,47,47,19,68,19,68,68,68,68,68,68,68,68,68,68,68,68,68,19,159,164,68,-11,68,-15,68,68,-49,-50,19,159,19,19,47,-12,19,]),';':([3,9,15,18,20,21,22,23,24,25,26,27,28,29,38,39,40,41,42,47,48,55,56,64,68,69,70,71,72,73,74,76,78,82,83,87,90,93,95,97,114,115,119,122,124,127,128,132,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,164,166,167,168,172,177,179,180,181,182,188,190,192,195,196,197,198,199,202,203,206,207,],[4,-2,52,-95,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-27,-28,-29,-30,-31,-95,84,91,-35,-75,-92,-93,-70,-71,-72,-73,-74,-95,-58,-16,-18,125,-59,-36,-62,-47,-90,-89,91,162,165,-20,-95,-34,-61,-95,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-51,183,-55,-17,-19,189,-26,-60,-65,-67,-94,-52,-53,201,-24,-22,-66,-54,-56,-57,-32,-25,-21,-48,-33,]),'BEGIN':([4,6,7,10,11,35,44,45,49,50,52,57,80,84,85,91,100,118,125,162,165,178,184,185,201,204,],[-95,11,-4,-3,11,11,-5,-10,-7,-14,-95,11,-9,-6,-13,11,11,11,-8,-11,-15,11,11,11,-12,11,]),'VAR':([4,6,7,10,44,45,49,50,52,80,84,85,125,162,165,201,],[-95,12,-4,-3,-5,-10,-7,-14,-95,-9,-6,-13,-8,-11,-15,-12,]),'LABEL':([4,6,7,10,44,45,49,50,52,80,84,85,125,162,165,201,],[-95,13,-4,-3,-5,-10,-7,-14,-95,-9,-6,-13,-8,-11,-15,-12,]),'CONST':([4,6,7,10,44,45,49,50,52,80,84,85,125,162,165,201,],[-95,14,-4,-3,-5,-10,-7,-14,-95,-9,-6,-13,-8,-11,-15,-12,]),'PROCEDURE':([4,6,7,10,44,45,49,50,52,80,84,85,125,162,165,201,],[-95,16,-4,-3,-5,-10,-7,-14,-95,-9,-6,-13,-8,-11,-15,-12,]),'FUNCTION':([4,6,7,10,44,45,49,50,52,80,84,85,125,162,165,201,],[-95,17,-4,-3,-5,-10,-7,-14,-95,-9,-6,-13,-8,-11,-15,-12,]),'.':([5,9,90,],[8,-2,-59,]),'FOR':([11,35,57,91,100,118,178,184,185,204,],[32,32,32,32,32,32,32,32,32,32,]),'IF':([11,35,57,91,100,118,178,184,185,204,],[33,33,33,33,33,33,33,33,33,33,]),'WHILE':([11,35,57,91,100,118,178,184,185,204,],[34,34,34,34,34,34,34,34,34,34,]),'REPEAT':([11,35,57,91,100,118,178,184,185,204,],[35,35,35,35,35,35,35,35,35,35,]),'CASE':([11,35,57,91,100,118,178,184,185,204,],[36,36,36,36,36,36,36,36,36,36,]),'GOTO':([11,35,57,91,100,118,178,184,185,204,],[37,37,37,37,37,37,37,37,37,37,]),'INT':([11,33,34,35,36,57,58,59,60,61,65,66,67,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,155,163,169,171,173,174,175,176,178,184,185,186,191,204,205,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-49,-50,38,38,38,38,38,38,38,]),'REAL':([11,33,34,35,36,57,58,59,60,61,65,66,67,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,155,163,169,171,173,174,175,176,178,184,185,186,191,204,205,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-49,-50,39,39,39,39,39,39,39,]),'BOOL':([11,33,34,35,36,57,58,59,60,61,65,66,67,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,155,163,169,171,173,174,175,176,178,184,185,186,191,204,205,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-49,-50,40,40,40,40,40,40,40,]),'CHAR':([11,33,34,35,36,57,58,59,60,61,65,66,67,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,155,163,169,171,173,174,175,176,178,184,185,186,191,204,205,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-49,-50,41,41,41,41,41,41,41,]),'STRING':([11,33,34,35,36,57,58,59,60,61,65,66,67,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,155,163,169,171,173,174,175,176,178,184,185,186,191,204,205,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-49,-50,42,42,42,42,42,42,42,]),'ARRAY':([11,33,34,35,36,57,58,59,60,61,65,66,67,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,155,163,169,171,173,174,175,176,178,184,185,186,191,204,205,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-49,-50,43,43,43,43,43,43,43,]),'END':([18,20,21,22,23,24,25,26,27,28,29,55,56,64,68,69,70,71,72,73,74,78,90,93,95,97,114,115,132,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,156,157,172,177,179,180,181,182,195,196,197,198,206,],[-95,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,90,-35,-75,-92,-93,-70,-71,-72,-73,-74,-58,-59,-36,-62,-47,-90,-89,-34,-61,-95,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-51,182,-55,-60,-65,-67,-94,-52,-53,-66,-54,-56,-57,-48,]),':':([19,46,47,70,71,72,73,74,82,83,129,131,158,159,164,170,],[57,81,-95,-70,-71,-72,-73,-74,-16,-18,169,171,184,185,-17,191,]),'(':([19,31,33,34,36,38,39,40,41,42,53,54,58,59,60,61,65,66,67,68,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,155,163,173,174,175,176,199,207,],[58,61,67,67,67,-27,-28,-29,-30,-31,88,89,67,67,67,67,67,67,67,58,58,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-49,-50,-32,-33,]),'ASSIGN':([19,30,62,92,135,],[-68,60,99,-68,-69,]),'[':([19,43,68,92,],[59,79,117,59,]),'UNTIL':([20,21,22,23,24,25,26,27,28,29,56,64,68,69,70,71,72,73,74,76,78,90,93,95,97,114,115,119,132,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,172,177,179,180,181,182,195,206,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-35,-75,-92,-93,-70,-71,-72,-73,-74,-95,-58,-59,-36,-62,-47,-90,-89,155,-34,-61,-95,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-51,-60,-65,-67,-94,-52,-53,-66,-48,]),'ELSE':([20,21,22,23,24,25,26,27,28,29,64,68,69,70,71,72,73,74,78,90,93,95,97,114,115,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,172,177,179,180,181,182,195,206,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-75,-92,-93,-70,-71,-72,-73,-74,-58,-59,-36,-62,-47,-90,-89,-61,178,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-51,-60,-65,-67,-94,-52,-53,-66,-48,]),'NOT':([33,34,36,58,59,60,61,65,66,67,99,101,102,103,104,105,106,107,108,109,110,111,112,113,155,163,173,174,175,176,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-49,-50,]),'-':([33,34,36,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,77,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,163,172,173,174,175,176,180,181,188,193,194,],[65,65,65,65,65,65,65,102,-75,65,65,65,-92,-93,-70,-71,-72,-73,-74,102,102,102,-62,102,102,102,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-90,-89,102,-61,102,-76,-77,-78,-79,-80,102,102,102,102,102,102,102,102,-91,65,65,-60,65,65,-49,-50,-94,102,102,102,102,]),'LITERAL_INT':([33,34,36,58,59,60,61,65,66,67,79,86,99,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,155,161,163,173,174,175,176,183,],[70,70,70,70,70,70,70,70,70,70,121,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,153,70,70,187,70,70,70,-49,-50,70,]),'LITERAL_REAL':([33,34,36,58,59,60,61,65,66,67,86,99,101,102,103,104,105,106,107,108,109,110,111,112,113,120,155,163,173,174,175,176,183,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-49,-50,71,]),'LITERAL_BOOL':([33,34,36,58,59,60,61,65,66,67,86,99,101,102,103,104,105,106,107,108,109,110,111,112,113,120,155,163,173,174,175,176,183,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-49,-50,72,]),'LITERAL_CHAR':([33,34,36,58,59,60,61,65,66,67,86,99,101,102,103,104,105,106,107,108,109,110,111,112,113,120,155,163,173,174,175,176,183,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-49,-50,73,]),'LITERAL_STRING':([33,34,36,58,59,60,61,65,66,67,86,99,101,102,103,104,105,106,107,108,109,110,111,112,113,120,155,163,173,174,175,176,183,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-49,-50,74,]),'EQ':([38,39,40,41,42,47,51,63,64,68,69,70,71,72,73,74,75,77,82,83,94,95,96,97,98,114,115,116,122,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,164,172,180,181,188,193,194,199,207,],[-27,-28,-29,-30,-31,-95,86,106,-75,-92,-93,-70,-71,-72,-73,-74,106,106,-16,-18,106,-62,106,106,106,-90,-89,106,163,-61,106,-76,-77,-78,-79,-80,None,None,-83,-84,-85,-86,106,106,-91,-17,-60,-94,106,106,106,106,-32,-33,]),')':([38,39,40,41,42,58,64,68,69,70,71,72,73,74,88,89,94,95,98,114,115,116,126,128,130,133,134,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,167,168,172,180,190,193,199,202,207,],[-27,-28,-29,-30,-31,95,-75,-92,-93,-70,-71,-72,-73,-74,127,131,-95,-62,136,-90,-89,152,166,-95,170,172,-64,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-23,-26,-60,-94,-24,-63,-32,-25,-33,]),',':([47,64,68,69,70,71,72,73,74,82,83,94,95,114,115,133,134,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,164,172,180,193,],[-95,-75,-92,-93,-70,-71,-72,-73,-74,123,-18,-95,-62,-90,-89,173,-64,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-17,-60,-94,-63,]),'THEN':([63,64,68,69,70,71,72,73,74,95,114,115,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,],[100,-75,-92,-93,-70,-71,-72,-73,-74,-62,-90,-89,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-60,-94,]),'+':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[101,-75,-92,-93,-70,-71,-72,-73,-74,101,101,101,-62,101,101,101,-90,-89,101,-61,101,-76,-77,-78,-79,-80,101,101,101,101,101,101,101,101,-91,-60,-94,101,101,101,101,]),'*':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[103,-75,-92,-93,-70,-71,-72,-73,-74,103,103,103,-62,103,103,103,-90,-89,103,-61,103,103,103,-78,-79,-80,103,103,103,103,103,103,103,103,-91,-60,-94,103,103,103,103,]),'/':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[104,-75,-92,-93,-70,-71,-72,-73,-74,104,104,104,-62,104,104,104,-90,-89,104,-61,104,104,104,-78,-79,-80,104,104,104,104,104,104,104,104,-91,-60,-94,104,104,104,104,]),'%':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[105,-75,-92,-93,-70,-71,-72,-73,-74,105,105,105,-62,105,105,105,-90,-89,105,-61,105,105,105,-78,-79,-80,105,105,105,105,105,105,105,105,-91,-60,-94,105,105,105,105,]),'NEQ':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[107,-75,-92,-93,-70,-71,-72,-73,-74,107,107,107,-62,107,107,107,-90,-89,107,-61,107,-76,-77,-78,-79,-80,None,None,-83,-84,-85,-86,107,107,-91,-60,-94,107,107,107,107,]),'LT':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[108,-75,-92,-93,-70,-71,-72,-73,-74,108,108,108,-62,108,108,108,-90,-89,108,-61,108,-76,-77,-78,-79,-80,108,108,None,None,None,None,108,108,-91,-60,-94,108,108,108,108,]),'GT':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[109,-75,-92,-93,-70,-71,-72,-73,-74,109,109,109,-62,109,109,109,-90,-89,109,-61,109,-76,-77,-78,-79,-80,109,109,None,None,None,None,109,109,-91,-60,-94,109,109,109,109,]),'LEQ':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[110,-75,-92,-93,-70,-71,-72,-73,-74,110,110,110,-62,110,110,110,-90,-89,110,-61,110,-76,-77,-78,-79,-80,110,110,None,None,None,None,110,110,-91,-60,-94,110,110,110,110,]),'GEQ':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[111,-75,-92,-93,-70,-71,-72,-73,-74,111,111,111,-62,111,111,111,-90,-89,111,-61,111,-76,-77,-78,-79,-80,111,111,None,None,None,None,111,111,-91,-60,-94,111,111,111,111,]),'AND':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[112,-75,-92,-93,-70,-71,-72,-73,-74,112,112,112,-62,112,112,112,-90,-89,112,-61,112,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,112,-91,-60,-94,112,112,112,112,]),'OR':([63,64,68,69,70,71,72,73,74,75,77,94,95,96,97,98,114,115,116,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,181,188,193,194,],[113,-75,-92,-93,-70,-71,-72,-73,-74,113,113,113,-62,113,113,113,-90,-89,113,-61,113,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-60,-94,113,113,113,113,]),'DO':([64,68,69,70,71,72,73,74,75,95,114,115,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,194,],[-75,-92,-93,-70,-71,-72,-73,-74,118,-62,-90,-89,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-60,-94,204,]),'OF':([64,68,69,70,71,72,73,74,77,95,114,115,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,160,172,180,200,],[-75,-92,-93,-70,-71,-72,-73,-74,120,-62,-90,-89,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,186,-60,-94,205,]),']':([64,68,69,70,71,72,73,74,95,96,114,115,121,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,172,180,187,],[-75,-92,-93,-70,-71,-72,-73,-74,-62,135,-90,-89,160,-61,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,180,-60,-94,200,]),'DOWNTO':([64,68,69,70,71,72,73,74,95,114,115,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,],[-75,-92,-93,-70,-71,-72,-73,-74,-62,-90,-89,-61,175,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-60,-94,]),'TO':([64,68,69,70,71,72,73,74,95,114,115,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,172,180,],[-75,-92,-93,-70,-71,-72,-73,-74,-62,-90,-89,-61,176,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-91,-60,-94,]),'RANGE':([121,],[161,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body':([4,52,],[5,87,]),'local_list':([4,52,],[6,6,]),'empty':([4,18,47,52,76,94,128,138,],[7,56,83,7,56,134,168,179,]),'compound_stmt':([6,11,35,57,91,100,118,178,184,185,204,],[9,29,29,29,29,29,29,29,29,29,29,]),'local':([6,],[10,]),'header':([6,],[15,]),'stmt':([11,35,91,100,118,178,184,185,204,],[18,76,132,138,154,195,197,198,206,]),'non_label_stmt':([11,35,57,91,100,118,178,184,185,204,],[20,20,93,20,20,20,20,20,20,20,]),'assign_stmt':([11,35,57,91,100,118,178,184,185,204,],[21,21,21,21,21,21,21,21,21,21,]),'call_stmt':([11,33,34,35,36,57,58,59,60,61,65,66,67,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,155,163,173,174,178,184,185,204,],[22,64,64,22,64,22,64,64,64,64,64,64,64,22,64,22,64,64,64,64,64,64,64,64,64,64,64,64,64,22,64,64,64,64,22,22,22,22,]),'for_stmt':([11,35,57,91,100,118,178,184,185,204,],[23,23,23,23,23,23,23,23,23,23,]),'if_stmt':([11,35,57,91,100,118,178,184,185,204,],[24,24,24,24,24,24,24,24,24,24,]),'while_stmt':([11,35,57,91,100,118,178,184,185,204,],[25,25,25,25,25,25,25,25,25,25,]),'repeat_stmt':([11,35,57,91,100,118,178,184,185,204,],[26,26,26,26,26,26,26,26,26,26,]),'case_stmt':([11,35,57,91,100,118,178,184,185,204,],[27,27,27,27,27,27,27,27,27,27,]),'goto_stmt':([11,35,57,91,100,118,178,184,185,204,],[28,28,28,28,28,28,28,28,28,28,]),'lvalue':([11,35,57,91,100,118,178,184,185,204,],[30,30,30,30,30,30,30,30,30,30,]),'vartype':([11,33,34,35,36,57,58,59,60,61,65,66,67,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,155,163,169,171,173,174,178,184,185,186,191,204,205,],[31,31,31,31,31,31,31,31,31,31,31,31,31,122,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,190,192,31,31,31,31,31,199,203,31,207,]),'var_list':([12,],[44,]),'var':([12,44,],[45,80,]),'id_list':([12,13,14,44,49,88,89,189,],[46,48,51,46,51,129,129,129,]),'const_exp_list':([14,],[49,]),'const_exp':([14,49,],[50,85,]),'semicolon_stmt_list':([18,76,],[55,119,]),'exp':([33,34,36,58,59,60,61,65,66,67,99,101,102,103,104,105,106,107,108,109,110,111,112,113,155,163,173,174,],[63,75,77,94,96,97,98,114,115,116,137,139,140,141,142,143,144,145,146,147,148,149,150,151,181,188,193,194,]),'literal':([33,34,36,58,59,60,61,65,66,67,86,99,101,102,103,104,105,106,107,108,109,110,111,112,113,120,155,163,173,174,183,],[69,69,69,69,69,69,69,69,69,69,124,69,69,69,69,69,69,69,69,69,69,69,69,69,69,158,69,69,69,69,158,]),'comma_id_list':([47,],[82,]),'formal_list':([88,89,],[126,130,]),'formal':([88,89,189,],[128,128,202,]),'comma_exp_list':([94,],[133,]),'case_exp_list':([120,],[156,]),'case_exp':([120,183,],[157,196,]),'semicolon_formal_list':([128,],[167,]),'direction':([137,],[174,]),'else_stmt':([138,],[177,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; body .','program',5,'p_program','yacc.py',48),
  ('body -> local_list compound_stmt','body',2,'p_body','yacc.py',53),
  ('local_list -> local_list local','local_list',2,'p_local_list','yacc.py',58),
  ('local_list -> empty','local_list',1,'p_local_list','yacc.py',59),
  ('local -> VAR var_list','local',2,'p_local1','yacc.py',68),
  ('local -> LABEL id_list ;','local',3,'p_local2','yacc.py',73),
  ('local -> CONST const_exp_list','local',2,'p_local3','yacc.py',78),
  ('local -> header ; body ;','local',4,'p_local4','yacc.py',83),
  ('var_list -> var_list var','var_list',2,'p_var_list','yacc.py',88),
  ('var_list -> var','var_list',1,'p_var_list','yacc.py',89),
  ('var -> id_list : vartype ;','var',4,'p_var','yacc.py',98),
  ('var -> id_list : vartype EQ exp ;','var',6,'p_var','yacc.py',99),
  ('const_exp_list -> const_exp_list const_exp','const_exp_list',2,'p_const_exp_list','yacc.py',108),
  ('const_exp_list -> const_exp','const_exp_list',1,'p_const_exp_list','yacc.py',109),
  ('const_exp -> id_list EQ literal ;','const_exp',4,'p_const_exp','yacc.py',118),
  ('id_list -> ID comma_id_list','id_list',2,'p_id_list','yacc.py',123),
  ('comma_id_list -> comma_id_list , ID','comma_id_list',3,'p_comma_id_list','yacc.py',129),
  ('comma_id_list -> empty','comma_id_list',1,'p_comma_id_list','yacc.py',130),
  ('header -> PROCEDURE ID ( formal_list )','header',5,'p_header1','yacc.py',139),
  ('header -> PROCEDURE ID ( )','header',4,'p_header1','yacc.py',140),
  ('header -> FUNCTION ID ( formal_list ) : vartype','header',7,'p_header2','yacc.py',148),
  ('header -> FUNCTION ID ( ) : vartype','header',6,'p_header2','yacc.py',149),
  ('formal_list -> formal semicolon_formal_list','formal_list',2,'p_formal_list','yacc.py',157),
  ('formal -> id_list : vartype','formal',3,'p_formal','yacc.py',163),
  ('semicolon_formal_list -> semicolon_formal_list ; formal','semicolon_formal_list',3,'p_semicolon_formal_list','yacc.py',168),
  ('semicolon_formal_list -> empty','semicolon_formal_list',1,'p_semicolon_formal_list','yacc.py',169),
  ('vartype -> INT','vartype',1,'p_vartype1','yacc.py',179),
  ('vartype -> REAL','vartype',1,'p_vartype1','yacc.py',180),
  ('vartype -> BOOL','vartype',1,'p_vartype1','yacc.py',181),
  ('vartype -> CHAR','vartype',1,'p_vartype1','yacc.py',182),
  ('vartype -> STRING','vartype',1,'p_vartype1','yacc.py',183),
  ('vartype -> ARRAY [ LITERAL_INT ] OF vartype','vartype',6,'p_vartype2','yacc.py',188),
  ('vartype -> ARRAY [ LITERAL_INT RANGE LITERAL_INT ] OF vartype','vartype',8,'p_vartype2','yacc.py',189),
  ('semicolon_stmt_list -> semicolon_stmt_list ; stmt','semicolon_stmt_list',3,'p_semicolon_stmt_list','yacc.py',197),
  ('semicolon_stmt_list -> empty','semicolon_stmt_list',1,'p_semicolon_stmt_list','yacc.py',198),
  ('stmt -> ID : non_label_stmt','stmt',3,'p_stmt','yacc.py',207),
  ('stmt -> non_label_stmt','stmt',1,'p_stmt','yacc.py',208),
  ('non_label_stmt -> assign_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',216),
  ('non_label_stmt -> call_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',217),
  ('non_label_stmt -> for_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',218),
  ('non_label_stmt -> if_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',219),
  ('non_label_stmt -> while_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',220),
  ('non_label_stmt -> repeat_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',221),
  ('non_label_stmt -> case_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',222),
  ('non_label_stmt -> goto_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',223),
  ('non_label_stmt -> compound_stmt','non_label_stmt',1,'p_non_label_stmt','yacc.py',224),
  ('assign_stmt -> lvalue ASSIGN exp','assign_stmt',3,'p_assign_stmt','yacc.py',229),
  ('for_stmt -> FOR ID ASSIGN exp direction exp DO stmt','for_stmt',8,'p_for_stmt','yacc.py',234),
  ('direction -> DOWNTO','direction',1,'p_direction','yacc.py',240),
  ('direction -> TO','direction',1,'p_direction','yacc.py',241),
  ('while_stmt -> WHILE exp DO stmt','while_stmt',4,'p_while_stmt','yacc.py',246),
  ('repeat_stmt -> REPEAT stmt semicolon_stmt_list UNTIL exp','repeat_stmt',5,'p_repeat_stmt','yacc.py',251),
  ('case_stmt -> CASE exp OF case_exp_list END','case_stmt',5,'p_case_stmt','yacc.py',257),
  ('case_exp_list -> case_exp_list ; case_exp','case_exp_list',3,'p_case_exp_list','yacc.py',262),
  ('case_exp_list -> case_exp','case_exp_list',1,'p_case_exp_list','yacc.py',263),
  ('case_exp -> literal : stmt','case_exp',3,'p_case_exp','yacc.py',274),
  ('case_exp -> ID : stmt','case_exp',3,'p_case_exp','yacc.py',275),
  ('goto_stmt -> GOTO ID','goto_stmt',2,'p_goto_stmt','yacc.py',281),
  ('compound_stmt -> BEGIN stmt semicolon_stmt_list END','compound_stmt',4,'p_compound_stmt','yacc.py',286),
  ('call_stmt -> ID ( exp comma_exp_list )','call_stmt',5,'p_call_stmt','yacc.py',292),
  ('call_stmt -> vartype ( exp )','call_stmt',4,'p_call_stmt','yacc.py',293),
  ('call_stmt -> ID ( )','call_stmt',3,'p_call_stmt','yacc.py',294),
  ('comma_exp_list -> comma_exp_list , exp','comma_exp_list',3,'p_comma_exp_list','yacc.py',305),
  ('comma_exp_list -> empty','comma_exp_list',1,'p_comma_exp_list','yacc.py',306),
  ('if_stmt -> IF exp THEN stmt else_stmt','if_stmt',5,'p_if_stmt','yacc.py',315),
  ('else_stmt -> ELSE stmt','else_stmt',2,'p_else_stmt','yacc.py',320),
  ('else_stmt -> empty','else_stmt',1,'p_else_stmt','yacc.py',321),
  ('lvalue -> ID','lvalue',1,'p_lvalue','yacc.py',330),
  ('lvalue -> ID [ exp ]','lvalue',4,'p_lvalue','yacc.py',331),
  ('literal -> LITERAL_INT','literal',1,'p_literal','yacc.py',339),
  ('literal -> LITERAL_REAL','literal',1,'p_literal','yacc.py',340),
  ('literal -> LITERAL_BOOL','literal',1,'p_literal','yacc.py',341),
  ('literal -> LITERAL_CHAR','literal',1,'p_literal','yacc.py',342),
  ('literal -> LITERAL_STRING','literal',1,'p_literal','yacc.py',343),
  ('exp -> call_stmt','exp',1,'p_exp1','yacc.py',348),
  ('exp -> exp + exp','exp',3,'p_exp2','yacc.py',353),
  ('exp -> exp - exp','exp',3,'p_exp2','yacc.py',354),
  ('exp -> exp * exp','exp',3,'p_exp2','yacc.py',355),
  ('exp -> exp / exp','exp',3,'p_exp2','yacc.py',356),
  ('exp -> exp % exp','exp',3,'p_exp2','yacc.py',357),
  ('exp -> exp EQ exp','exp',3,'p_exp2','yacc.py',358),
  ('exp -> exp NEQ exp','exp',3,'p_exp2','yacc.py',359),
  ('exp -> exp LT exp','exp',3,'p_exp2','yacc.py',360),
  ('exp -> exp GT exp','exp',3,'p_exp2','yacc.py',361),
  ('exp -> exp LEQ exp','exp',3,'p_exp2','yacc.py',362),
  ('exp -> exp GEQ exp','exp',3,'p_exp2','yacc.py',363),
  ('exp -> exp AND exp','exp',3,'p_exp2','yacc.py',364),
  ('exp -> exp OR exp','exp',3,'p_exp2','yacc.py',365),
  ('exp -> NOT exp','exp',2,'p_exp3','yacc.py',370),
  ('exp -> - exp','exp',2,'p_exp_uminus','yacc.py',375),
  ('exp -> ( exp )','exp',3,'p_exp4','yacc.py',379),
  ('exp -> ID','exp',1,'p_exp5','yacc.py',384),
  ('exp -> literal','exp',1,'p_exp5','yacc.py',385),
  ('exp -> ID [ LITERAL_INT ]','exp',4,'p_exp6','yacc.py',391),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',398),
]
